/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppRegisterImport } from './routes/app/register'
import { Route as AppLoginImport } from './routes/app/login'
import { Route as AppUserRouteImport } from './routes/app/user/route'
import { Route as AppUserIndexImport } from './routes/app/user/index'
import { Route as AppUserProfileImport } from './routes/app/user/profile'
import { Route as AppUserCardsImport } from './routes/app/user/cards'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppRegisterRoute = AppRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppLoginRoute = AppLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppUserRouteRoute = AppUserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppUserIndexRoute = AppUserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppUserRouteRoute,
} as any)

const AppUserProfileRoute = AppUserProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppUserRouteRoute,
} as any)

const AppUserCardsRoute = AppUserCardsImport.update({
  id: '/cards',
  path: '/cards',
  getParentRoute: () => AppUserRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/user': {
      id: '/app/user'
      path: '/user'
      fullPath: '/app/user'
      preLoaderRoute: typeof AppUserRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/login': {
      id: '/app/login'
      path: '/login'
      fullPath: '/app/login'
      preLoaderRoute: typeof AppLoginImport
      parentRoute: typeof AppRouteImport
    }
    '/app/register': {
      id: '/app/register'
      path: '/register'
      fullPath: '/app/register'
      preLoaderRoute: typeof AppRegisterImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/user/cards': {
      id: '/app/user/cards'
      path: '/cards'
      fullPath: '/app/user/cards'
      preLoaderRoute: typeof AppUserCardsImport
      parentRoute: typeof AppUserRouteImport
    }
    '/app/user/profile': {
      id: '/app/user/profile'
      path: '/profile'
      fullPath: '/app/user/profile'
      preLoaderRoute: typeof AppUserProfileImport
      parentRoute: typeof AppUserRouteImport
    }
    '/app/user/': {
      id: '/app/user/'
      path: '/'
      fullPath: '/app/user/'
      preLoaderRoute: typeof AppUserIndexImport
      parentRoute: typeof AppUserRouteImport
    }
  }
}

// Create and export the route tree

interface AppUserRouteRouteChildren {
  AppUserCardsRoute: typeof AppUserCardsRoute
  AppUserProfileRoute: typeof AppUserProfileRoute
  AppUserIndexRoute: typeof AppUserIndexRoute
}

const AppUserRouteRouteChildren: AppUserRouteRouteChildren = {
  AppUserCardsRoute: AppUserCardsRoute,
  AppUserProfileRoute: AppUserProfileRoute,
  AppUserIndexRoute: AppUserIndexRoute,
}

const AppUserRouteRouteWithChildren = AppUserRouteRoute._addFileChildren(
  AppUserRouteRouteChildren,
)

interface AppRouteRouteChildren {
  AppUserRouteRoute: typeof AppUserRouteRouteWithChildren
  AppLoginRoute: typeof AppLoginRoute
  AppRegisterRoute: typeof AppRegisterRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppUserRouteRoute: AppUserRouteRouteWithChildren,
  AppLoginRoute: AppLoginRoute,
  AppRegisterRoute: AppRegisterRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '/app/user': typeof AppUserRouteRouteWithChildren
  '/app/login': typeof AppLoginRoute
  '/app/register': typeof AppRegisterRoute
  '/app/': typeof AppIndexRoute
  '/app/user/cards': typeof AppUserCardsRoute
  '/app/user/profile': typeof AppUserProfileRoute
  '/app/user/': typeof AppUserIndexRoute
}

export interface FileRoutesByTo {
  '/app/login': typeof AppLoginRoute
  '/app/register': typeof AppRegisterRoute
  '/app': typeof AppIndexRoute
  '/app/user/cards': typeof AppUserCardsRoute
  '/app/user/profile': typeof AppUserProfileRoute
  '/app/user': typeof AppUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/user': typeof AppUserRouteRouteWithChildren
  '/app/login': typeof AppLoginRoute
  '/app/register': typeof AppRegisterRoute
  '/app/': typeof AppIndexRoute
  '/app/user/cards': typeof AppUserCardsRoute
  '/app/user/profile': typeof AppUserProfileRoute
  '/app/user/': typeof AppUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/app/user'
    | '/app/login'
    | '/app/register'
    | '/app/'
    | '/app/user/cards'
    | '/app/user/profile'
    | '/app/user/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app/login'
    | '/app/register'
    | '/app'
    | '/app/user/cards'
    | '/app/user/profile'
    | '/app/user'
  id:
    | '__root__'
    | '/app'
    | '/app/user'
    | '/app/login'
    | '/app/register'
    | '/app/'
    | '/app/user/cards'
    | '/app/user/profile'
    | '/app/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app"
      ]
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/user",
        "/app/login",
        "/app/register",
        "/app/"
      ]
    },
    "/app/user": {
      "filePath": "app/user/route.tsx",
      "parent": "/app",
      "children": [
        "/app/user/cards",
        "/app/user/profile",
        "/app/user/"
      ]
    },
    "/app/login": {
      "filePath": "app/login.tsx",
      "parent": "/app"
    },
    "/app/register": {
      "filePath": "app/register.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/app/user/cards": {
      "filePath": "app/user/cards.tsx",
      "parent": "/app/user"
    },
    "/app/user/profile": {
      "filePath": "app/user/profile.tsx",
      "parent": "/app/user"
    },
    "/app/user/": {
      "filePath": "app/user/index.tsx",
      "parent": "/app/user"
    }
  }
}
ROUTE_MANIFEST_END */
